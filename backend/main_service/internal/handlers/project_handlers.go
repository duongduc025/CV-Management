package handlers

import (
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/vdt/cv-management/internal/models"
)

// GetProjects returns a list of all projects
func GetProjects(c *gin.Context) {
	// TODO: Get actual data from database
	// Mock data for now
	startDate, _ := time.Parse("2006-01-02", "2022-01-01")
	endDate, _ := time.Parse("2006-01-02", "2022-12-31")

	projects := []models.Project{
		{
			ID:        "123e4567-e89b-12d3-a456-426614174030",
			Name:      "Phát triển hệ thống quản lý CV",
			StartDate: startDate,
			EndDate:   endDate,
		},
		{
			ID:        "123e4567-e89b-12d3-a456-426614174031",
			Name:      "Nâng cấp hệ thống quản lý nhân sự",
			StartDate: startDate,
		},
	}

	c.JSON(http.StatusOK, gin.H{
		"status": "success",
		"data":   projects,
	})
}

// GetProjectByID returns a specific project by ID
func GetProjectByID(c *gin.Context) {
	id := c.Param("id")

	// TODO: Get actual data from database
	// Mock data for now
	startDate, _ := time.Parse("2006-01-02", "2022-01-01")
	endDate, _ := time.Parse("2006-01-02", "2022-12-31")
	joinedDate, _ := time.Parse("2006-01-02", "2022-01-15")

	project := models.Project{
		ID:        id,
		Name:      "Phát triển hệ thống quản lý CV",
		StartDate: startDate,
		EndDate:   endDate,
		Members: []models.Member{
			{
				ProjectID:     id,
				UserID:        "123e4567-e89b-12d3-a456-426614174001",
				RoleInProject: "Project Manager",
				JoinedAt:      joinedDate,
				User: models.User{
					ID:           "123e4567-e89b-12d3-a456-426614174001",
					EmployeeCode: "EMP001",
					FullName:     "Nguyễn Văn A",
					Email:        "nguyenvana@example.com",
				},
			},
			{
				ProjectID:     id,
				UserID:        "123e4567-e89b-12d3-a456-426614174002",
				RoleInProject: "Developer",
				JoinedAt:      joinedDate,
				User: models.User{
					ID:           "123e4567-e89b-12d3-a456-426614174002",
					EmployeeCode: "EMP002",
					FullName:     "Trần Thị B",
					Email:        "tranthib@example.com",
				},
			},
		},
	}

	c.JSON(http.StatusOK, gin.H{
		"status": "success",
		"data":   project,
	})
}

// CreateProject creates a new project
func CreateProject(c *gin.Context) {
	var project models.Project

	if err := c.ShouldBindJSON(&project); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"status":  "error",
			"message": "Invalid project data",
		})
		return
	}

	// TODO: Save to database
	// Mock response for now
	project.ID = "123e4567-e89b-12d3-a456-426614174032" // Would be generated by DB

	c.JSON(http.StatusCreated, gin.H{
		"status": "success",
		"data":   project,
	})
}

// UpdateProject updates an existing project
func UpdateProject(c *gin.Context) {
	id := c.Param("id")

	var projectData models.Project
	if err := c.ShouldBindJSON(&projectData); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"status":  "error",
			"message": "Invalid project data",
		})
		return
	}

	// TODO: Update in database
	// Mock response for now
	projectData.ID = id

	c.JSON(http.StatusOK, gin.H{
		"status": "success",
		"data":   projectData,
	})
}

// AddProjectMember adds a member to a project
func AddProjectMember(c *gin.Context) {
	projectID := c.Param("id")

	var memberData models.Member
	if err := c.ShouldBindJSON(&memberData); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"status":  "error",
			"message": "Invalid member data",
		})
		return
	}

	// TODO: Save to database
	// Mock response for now
	memberData.ProjectID = projectID
	memberData.JoinedAt = time.Now()

	c.JSON(http.StatusCreated, gin.H{
		"status": "success",
		"data":   memberData,
	})
}

// RemoveProjectMember removes a member from a project
func RemoveProjectMember(c *gin.Context) {
	projectID := c.Param("id")
	userID := c.Param("userId")

	// TODO: Update in database
	// Mock response for now
	c.JSON(http.StatusOK, gin.H{
		"status":  "success",
		"message": "Member removed from project",
		"data": gin.H{
			"project_id": projectID,
			"user_id":    userID,
		},
	})
}
